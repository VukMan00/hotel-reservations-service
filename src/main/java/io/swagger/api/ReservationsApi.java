/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.52).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.exception.NotFoundException;
import io.swagger.model.PromoCode;
import io.swagger.model.Reservation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.Date;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-01-11T08:59:36.048365385Z[GMT]")
@Validated
public interface ReservationsApi {

    @Operation(summary = "Deletes reservation", description = "Deletes reservation of room for guest", security = {
        @SecurityRequirement(name = "BasicAuth")    }, tags={ "Reservation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Reservation is successfully deleted"),
        
        @ApiResponse(responseCode = "404", description = "Reservation not found"),
        
        @ApiResponse(responseCode = "500", description = "An error occured while processing the request. ") })
    @RequestMapping(value = "/reservations/rooms/{roomId}/guests/{guestJMBG}/dateFrom/{dateFrom}/dateTo/{dateTo}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteReservation(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("roomId") Integer roomId,
                                           @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("guestJMBG") String guestJMBG,
                                           @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("dateFrom") @DateTimeFormat(pattern = "yyyy-MM-dd") Date dateFrom,
                                           @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("dateTo") @DateTimeFormat(pattern = "yyyy-MM-dd") Date dateTo) throws NotFoundException;


    @Operation(summary = "Returns reservation", description = "Returns details of reservation with given room and guest", security = {
        @SecurityRequirement(name = "BasicAuth")    }, tags={ "Reservation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Gets Reservation of Room for Guest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Reservation.class))),
        
        @ApiResponse(responseCode = "404", description = "Reservation not found"),
        
        @ApiResponse(responseCode = "500", description = "An error occured while processing the request. ") })
    @RequestMapping(value = "/reservations/rooms/{roomId}/guests/{guestJMBG}/dateFrom/{dateFrom}/dateTo/{dateTo}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<Reservation> getReservation(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("roomId") Integer roomId,
                                               @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("guestJMBG") String guestJMBG,
                                               @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("dateFrom") @DateTimeFormat(pattern = "yyyy-MM-dd") Date dateFrom,
                                               @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("dateTo") @DateTimeFormat(pattern = "yyyy-MM-dd") Date dateTo) throws NotFoundException;

    @Operation(summary = "Update price of Reservation", description = "Update price of reservation based on inserted PromoCode", security = {
            @SecurityRequirement(name = "BasicAuth")    }, tags={ "Reservation" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Reservation is successfully updated", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Reservation.class))),

            @ApiResponse(responseCode = "404", description = "Reservation not found"),

            @ApiResponse(responseCode = "500", description = "An error occured while processing the request. ") })
    @RequestMapping(value = "/reservations/rooms/{roomId}/guests/{guestJMBG}/dateFrom/{dateFrom}/dateTo/{dateTo}",
            produces = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<String> updatePriceOfReservation(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("roomId") Integer roomId,
                                                         @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("guestJMBG") String guestJMBG,
                                                         @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("dateFrom") @DateTimeFormat(pattern = "yyyy-MM-dd") Date dateFrom,
                                                         @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("dateTo") @DateTimeFormat(pattern = "yyyy-MM-dd") Date dateTo,
                                                         @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody PromoCode promoCode) throws NotFoundException;

    @Operation(summary = "Return Reservation", description = "Returns the reservation of room", security = {
        @SecurityRequirement(name = "BasicAuth")    }, tags={ "Reservation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Fetch Reservaton of Room", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Reservation.class)))),
        
        @ApiResponse(responseCode = "404", description = "Room not found"),
        
        @ApiResponse(responseCode = "500", description = "An error occured while processing the request. ") })
    @RequestMapping(value = "/reservations/rooms/{roomId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Reservation>> getRoomReservations(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("roomId") Integer roomId);


    @Operation(summary = "Makes reservation", description = "Makes reservation for guests", security = {
        @SecurityRequirement(name = "BasicAuth")    }, tags={ "Reservation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Reservation is successfully made"),
        
        @ApiResponse(responseCode = "404", description = "Room/Guest not found"),
        
        @ApiResponse(responseCode = "500", description = "An error occured while processing the request. ") })
    @RequestMapping(value = "/reservations/rooms/{roomId}/guests/{guestJMBG}",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<String> saveRoomReservation(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("roomId") Integer roomId,
                                             @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("guestJMBG") String guestJMBG,
                                             @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Reservation body);
}

